/*2353126 信03 崔露文*/
#include <iostream>
#include <iomanip>
using namespace std;

/* ----具体要求----
   1、不允许添加其它头文件
   2、不允许定义全局变量、静态局部变量
   3、不允许添加其它函数
   4、main函数处理输入，允许循环
   --------------------------------------------------------------------- */

   /***************************************************************************
     函数名称：hanoi
     功    能：打印n层汉诺塔的移动顺序
     输入参数：int n：层数
               char src：起始柱
               char tmp：中间柱
               char dst：目标柱
     返 回 值：
     说    明：1、函数名、形参、返回类型均不准动
               2、本函数不允许出现任何形式的循环
   ***************************************************************************/
void hanoi(int n, char src, char tmp, char dst)
{
    if (n == 1) {
        cout << setiosflags(ios::right) << setw(2) << 1 << "# " 
             << (src < 97 ? char(src) : char(src - 32)) << "-->" << (dst < 97 ? char(dst) : char(dst - 32)) << endl;
        //无论输入是大写还是小写，输出都为大写字母
    }

    else {
        hanoi(n - 1, src, dst, tmp);
        //把n-1个盘子从起始移到中间
        cout << setiosflags(ios::right) << setw(2) << n << "# "
            << (src < 97 ? char(src) : char(src - 32)) << "-->" << (dst < 97 ? char(dst) : char(dst - 32)) << endl;
        hanoi(n - 1, tmp, src, dst);
        //把n-1个盘子从中间移到目标
        //这n-1个盘子在哪里，哪里就是起始柱，要移动到哪里，哪里就是目标柱
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：1、完成输入、调用递归函数
            2、处理输入错误时，允许使用循环
            3、为了统一检查，不再允许添加其它函数（输入起始/目标柱的代码不要求统一函数处理，均直接放在main中）
***************************************************************************/
int main()
{
    int n;
    char src, tmp, dst;
    
    while (1)
    {
        cout << "请输入汉诺塔的层数(1-16)" << endl;
        cin >> n;
        if (n < 1 || n>16) {
            cin.clear();
            cin.ignore(65536, '\n');
            continue;
        }
        else {
            cin.clear();
            cin.ignore(65536, '\n');
            break;
        }
    }

    while (1) 
    {
        cout << "请输入起始柱(A-C)" << endl;
        cin >> src;
        if (src == 'A' || src == 'a' || src == 'B' || src == 'b' || src == 'C' || src == 'c') {
            cin.clear();
            cin.ignore(65536, '\n');
            break;
        }
        else {
            cin.clear();
            cin.ignore(65536, '\n');
            continue;
        }
    }

    while (1) 
    {
        cout << "请输入目标柱(A-C)" << endl;
        cin >> dst;
        if ((dst == 'A' || dst == 'a' || dst == 'B' || dst == 'b' || dst == 'C' || dst == 'c') 
            && dst != src && dst != src+32 && dst != src-32) //目标柱输入正确且不和起始柱相同
        {
            cin.clear();
            cin.ignore(65536, '\n');
            break;
        }
        else 
        {
            cin.clear();
            cin.ignore(65536, '\n');
            if (dst == src || dst == src + 32 || dst == src - 32) {
                cout << "目标柱(" << (src < 97 ? char(src) : char(src - 32)) 
                     << ")不能与起始柱(" << (src < 97 ? char(src) : char(src - 32)) << ")相同" << endl;
            }
            continue;
        }
    }
    
    if ((src == 'A' || src == 'a') && (dst == 'B' || dst == 'b') || (src == 'B' || src == 'b') && (dst == 'A' || dst == 'a')) {
        tmp = 'C';
    }
    else if ((src == 'A' || src == 'a') && (dst == 'C' || dst == 'c') || (src == 'C' || src == 'c') && (dst == 'A' || dst == 'a')) {
        tmp = 'B';
    }
    else {
        tmp = 'A';
    }

    cout << "移动步骤为:" << endl;
    hanoi(n, src, tmp, dst);
    return 0;
}


